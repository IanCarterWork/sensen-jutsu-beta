import { render } from 'ejs';
const SyntaxVariablesRegExp = new RegExp('{{(.*?)}}', 'g');
const SyntaxNativeRegExp = new RegExp('{%(.*?)%}', 'g');
const SyDetr = '%sn';
/**
 * Element Attributes Observer
 */
function $DOMAttributesObserver(html, callback) {
    if (html.attributes) {
        const attributes = Object.values(html.attributes);
        if (attributes.length) {
            attributes.map(attribute => {
                const matches = [...attribute.value.matchAll(SyntaxVariablesRegExp)];
                matches.map((match, k) => { matches[k][1] = matches[k][1].trim(); });
                callback({
                    element: html,
                    attribute: true,
                    attributeName: attribute.name,
                    content: false,
                    matches: matches,
                    mockup: html.cloneNode(true)
                });
            });
        }
    }
    return $DOMAttributesObserver;
}
/**
 * Element Content Observer
 */
function $DOMContentObserver(html, callback) {
    const matches = [...html.innerText.matchAll(SyntaxVariablesRegExp)];
    if (matches.length) {
        matches.map((match, k) => { matches[k][1] = matches[k][1].trim(); });
        callback({
            element: html,
            attribute: false,
            content: true,
            matches: matches,
            mockup: html.cloneNode(true)
        });
    }
    return $DOMContentObserver;
}
/**
 * Element Observer
 */
function $DOMObserver(html, callback) {
    const children = Object.values(html.children);
    if (children.length) {
        children.map(e => {
            $DOMAttributesObserver(e, callback);
            $JSObserver(e, callback);
            $DOMObserver(e, callback);
        });
    }
    else {
        $DOMContentObserver(html, callback);
    }
    return $DOMObserver;
}
/**
 * Observe JS Code in Element
 */
function $JSObserver(html, callback) {
    const matches = [...html.innerText.matchAll(SyntaxNativeRegExp)];
    if (matches.length) {
        matches.map((match, k) => { matches[k][1] = matches[k][1].trim(); });
        callback({
            element: html,
            isNative: true,
            matches: matches,
            mockup: html.cloneNode(true)
        });
    }
    return $DOMContentObserver;
}
/**
 * Find Transaction expressions in JS Expression
 */
function $JSFindTransactions(html, transactions, callback) {
    if (transactions) {
        const $transactions = Object.entries(transactions);
        if ($transactions.length) {
            $transactions.map(entry => {
                const matches = [...StabilizeContent(html.innerHTML).matchAll(new RegExp(`${entry[0]}`, 'g'))];
                if (matches.length) {
                    // console.warn('$JSFindTransactions', entry, matches)
                    callback({
                        element: html,
                        isNative: true,
                        content: true,
                        matches: matches,
                        mockup: html.cloneNode(true)
                    });
                }
            });
        }
    }
    return $JSFindTransactions;
}
/**
 * Fragment rendering from String
 */
function FragmentRender(input, dictionary) {
    return render(`${input}`, dictionary, {
        delimiter: `${SyDetr}`,
        client: true
    });
}
/**
 * Parse Node of Component
 */
function ParseNodeState(component, node) {
    $DOMObserver(node, (record) => {
        if (record.matches.length) {
            // @ts-ignore
            record.element.$context = component.$state;
            if (!record.isNative) {
                record.matches.map(match => {
                    const key = match[1];
                    if (key in component.$transactions) {
                        component.PushRef(key, record);
                        component.UpgradeTransaction(key);
                    }
                    // else{
                    //     console.log('Not supported', key, record, window.StaticSensenJutsuInstance[ component.$staticKey ] )
                    // }
                });
            }
        }
    });
}
/**
 *  Parse Recorded
 */
function ParseRecord(component, record, match) {
    if (record.content) {
        record.element.innerHTML = FragmentRender(((record.mockup?.innerHTML || '')
            .replace(new RegExp(match[0]), `<${SyDetr}=${match[1]}${SyDetr}>`)), component.$transactions || {});
    }
    if (record.attribute) {
        if (record.attributeName) {
            record.element.setAttribute(record.attributeName, FragmentRender(((record.mockup?.getAttribute(record.attributeName) || '').replace(new RegExp(match[0]), `<${SyDetr}=${match[1]}${SyDetr}>`)), component.$transactions || {}));
        }
    }
    return ParseRecord;
}
function StabilizeContent(content) {
    return (content || '').replace(/&gt;/g, `>`).replace(/&lt;/g, `<`);
}
class SensenJutsu {
    // #$props : SensenTJutsuProps<V> = {} as SensenTJutsuProps<V>
    /**
     * New Construct
     */
    constructor(props) {
        // this.props = props;
        this.$staticKey = 0;
        this.$element = document.body;
        this.$virtualization = null;
        this.$transactions = {};
        this.$state = {};
        this.$refs = {};
        this.Init(props).States().Render();
    }
    Init(props) {
        // this.#$props = props;
        this.$element = (props.element instanceof HTMLElement)
            ? props.element
            : (typeof props.element == 'string'
                ? document.querySelector(`${props.element}`)
                : null);
        this.$transactions = props.transactions || {};
        this.$state = Object.assign({}, this.$transactions);
        window.StaticSensenJutsuInstance = window.StaticSensenJutsuInstance || [];
        this.$staticKey = window.StaticSensenJutsuInstance.length;
        window.StaticSensenJutsuInstance[this.$staticKey] = this;
        return this;
    }
    UpgradeTransaction(key) {
        if (key in this.$refs) {
            const records = this.$refs[key];
            records?.map(record => {
                if (record) {
                    record.matches.map(match => {
                        if (!record.isNative) {
                            ParseRecord(this, record, match);
                        }
                        else {
                            if (record.content) {
                                const computed = FragmentRender(StabilizeContent(record.mockup?.innerHTML || ''), this.$transactions);
                                record.element.innerHTML = computed;
                                $DOMObserver(record.element, (rec) => {
                                    if (rec.matches.length) {
                                        Object.values(rec.matches).map(mat => {
                                            this.PushRef(mat[1], rec);
                                            ParseRecord(this, rec, mat);
                                        });
                                    }
                                });
                            }
                        }
                    });
                }
            });
        }
        return this;
    }
    States() {
        if (this.$state) {
            const $_states = Object.entries(this.$state);
            /**
             * States
             */
            if ($_states.length) {
                const self = this;
                /**
                 * Pre-Build States
                 */
                $_states.map(e => {
                    if (typeof e[1] == 'string') {
                        const name = e[0];
                        const finder = [...e[1].matchAll(SyntaxVariablesRegExp)];
                        if (finder.length) {
                            finder.map(found => {
                                found[1] = found[1].trim();
                                this.$transactions[name] = e[1].replace(new RegExp(`${found[0]}`), this.$state[found[1]]);
                            });
                        }
                    }
                });
                /**
                 * Build States
                 */
                const $states = Object.entries(this.$state);
                $states.map(e => {
                    const name = e[0];
                    /**
                     * Objects
                     */
                    if (typeof e[1] == 'object') {
                        /**
                         * Is Array
                         */
                        if (Array.isArray(e[1])) {
                            this.$state[name] = new Proxy(e[1], {
                                set(target, prop, receive) {
                                    if (typeof target[prop] == 'function') {
                                        (() => {
                                            console.warn('SET MOVE With Function', prop);
                                            return target[prop];
                                        }).apply(target, typeof receive == 'object' ? receive : [receive]);
                                    }
                                    else {
                                        target[prop] = receive;
                                    }
                                    self.$transactions[name] = target;
                                    self.UpgradeTransaction(name);
                                    return true;
                                }
                            });
                            this.$transactions[name] = this.$state[name];
                            this.$state[name][0] = ('Teston');
                        }
                        else {
                            console.warn('State of Object', e);
                        }
                    }
                    else {
                        Object.defineProperty(this.$state, `${name}`, {
                            get: function () { return self.$transactions[name]; },
                            set: function (value) {
                                self.$transactions[name] = value;
                                self.UpgradeTransaction(name);
                            },
                        });
                    }
                });
            }
        }
        return this;
    }
    PushRef(key, record) {
        this.$refs[key] = this.$refs[key] || [];
        this.$refs[key]?.push(record);
        return this;
    }
    Render() {
        if (this.$element instanceof HTMLElement) {
            this.$virtualization = (new DOMParser()).parseFromString(this.$element.innerHTML, 'text/html');
            /**
             * Traitement des expressions Native
             */
            $DOMObserver(this.$virtualization.body, (record) => {
                if (record.matches.length) {
                    // @ts-ignore
                    record.element.$context = this.$state;
                    if (record.isNative) {
                        if (record.matches) {
                            record.matches.map(match => {
                                record.element.innerHTML = (StabilizeContent(record.element.innerHTML || '').replace(match[0], `<${SyDetr}${match[1]}${SyDetr}>`));
                            });
                            $JSFindTransactions(record.element, this.$transactions, (rec) => {
                                if (rec.isNative) {
                                    if (rec.matches.length) {
                                        rec.matches.map(mat => {
                                            this.PushRef(mat[0], rec);
                                        });
                                    }
                                }
                            });
                            try {
                                record.element.innerHTML = `${FragmentRender(StabilizeContent(record.element.innerHTML || ''), this.$transactions)}`;
                            }
                            catch (e) {
                                console.log('Error detected', e);
                            }
                        }
                    }
                }
            });
            /**
             * Traitement des transactions
             */
            ParseNodeState(this, this.$virtualization.body);
            /**
             * Mise à jour
             */
            this.$element.innerHTML = '';
            const children = Object.values(this.$virtualization.body.children);
            if (children.length) {
                children.map(child => {
                    this.$element?.appendChild(child);
                });
            }
        }
        return this;
    }
}
export default SensenJutsu;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9jb3JlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFPN0IsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFMUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFdkQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFBO0FBS3BCOztHQUVHO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBQyxJQUFpQixFQUFFLFFBQXVEO0lBRXRHLElBQUcsSUFBSSxDQUFDLFVBQVUsRUFBQztRQUVmLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDO1FBRXBELElBQUcsVUFBVSxDQUFDLE1BQU0sRUFBQztZQUVqQixVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQSxFQUFFO2dCQUV0QixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO2dCQUVyRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxFQUFFLEdBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUVqRSxRQUFRLENBQUM7b0JBQ0wsT0FBTyxFQUFFLElBQUk7b0JBQ2IsU0FBUyxFQUFFLElBQUk7b0JBQ2YsYUFBYSxFQUFFLFNBQVMsQ0FBQyxJQUFJO29CQUM3QixPQUFPLEVBQUUsS0FBSztvQkFDZCxPQUFP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QUVmLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBRWpCLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUV0QyxDQUFDLENBQUMsQ0FBQTthQUVMO1NBRUo7UUFHRCxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0NBRUo7QUFPRCxlQUFlLFdBQVcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU2Vuc2VuVEp1dHN1T2JzZXJ2ZXJSZWNvcmRzLCBTZW5zZW5USnV0c3VQcm9wcywgU2Vuc2VuVFdpbmRvdyB9IGZyb20gXCIuL2luZGV4LnRcIjtcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ2Vqcyc7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gXCJhc3NlcnRcIjtcblxuXG5kZWNsYXJlIGxldCB3aW5kb3c6IFNlbnNlblRXaW5kb3c7XG5cblxuY29uc3QgU3ludGF4VmFyaWFibGVzUmVnRXhwID0gbmV3IFJlZ0V4cCgne3soLio/KX19JywgJ2cnKVxuXG5jb25zdCBTeW50YXhOYXRpdmVSZWdFeHAgPSBuZXcgUmVnRXhwKCd7JSguKj8pJX0nLCAnZycpXG5cbmNvbnN0IFN5RGV0ciA9ICclc24nXG5cblxuXG5cbi8qKlxuICogRWxlbWVudCBBdHRyaWJ1dGVzIE9ic2VydmVyXG4gKi9cbmZ1bmN0aW9uICRET01BdHRyaWJ1dGVzT2JzZXJ2ZXIoaHRtbDogSFRNTEVsZW1lbnQsIGNhbGxiYWNrOiAocmVjb3JkOiBTZW5zZW5USnV0c3VPYnNlcnZlclJlY29yZHMpID0+IHZvaWQpe1xuXG4gICAgaWYoaHRtbC5hdHRyaWJ1dGVzKXtcblxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LnZhbHVlcyggaHRtbC5hdHRyaWJ1dGVzICk7XG5cbiAgICAgICAgaWYoYXR0cmlidXRlcy5sZW5ndGgpe1xuXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLm1hcChhdHRyaWJ1dGU9PntcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBbLi4uYXR0cmlidXRlLnZhbHVlLm1hdGNoQWxsKFN5bnRheFZhcmlhYmxlc1JlZ0V4cCldO1xuXG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5tYXAoKG1hdGNoLCBrKT0+eyBtYXRjaGVzW2tdWzFdID0gbWF0Y2hlc1trXVsxXS50cmltKCkgfSlcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogaHRtbCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiBhdHRyaWJ1dGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM6IG1hdGNoZXMsXG4gICAgICAgICAgICAgICAgICAgIG1vY2t1cDogaHRtbC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuICRET01BdHRyaWJ1dGVzT2JzZXJ2ZXI7XG4gICAgXG59XG5cblxuXG5cbi8qKlxuICogRWxlbWVudCBDb250ZW50IE9ic2VydmVyXG4gKi9cbmZ1bmN0aW9uICRET01Db250ZW50T2JzZXJ2ZXIoaHRtbDogSFRNTEVsZW1lbnQsIGNhbGxiYWNrOiAocmVjb3JkOiBTZW5zZW5USnV0c3VPYnNlcnZlclJlY29yZHMpID0+IHZvaWQpe1xuXG4gICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5odG1sLmlubmVyVGV4dC5tYXRjaEFsbChTeW50YXhWYXJpYWJsZXNSZWdFeHApXTtcblxuICAgIGlmKG1hdGNoZXMubGVuZ3RoKXtcblxuICAgICAgICBtYXRjaGVzLm1hcCgobWF0Y2gsIGspPT57IG1hdGNoZXNba11bMV0gPSBtYXRjaGVzW2tdWzFdLnRyaW0oKSB9KVxuXG4gICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGh0bWwsXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IGZhbHNlLFxuICAgICAgICAgICAgY29udGVudDogdHJ1ZSxcbiAgICAgICAgICAgIG1hdGNoZXM6IG1hdGNoZXMsXG4gICAgICAgICAgICBtb2NrdXA6IGh0bWwuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50XG4gICAgICAgIH0pXG5cbiAgICB9XG5cblxuICAgIHJldHVybiAkRE9NQ29udGVudE9ic2VydmVyO1xuXG59XG5cblxuXG5cbi8qKlxuICogRWxlbWVudCBPYnNlcnZlclxuICovXG5mdW5jdGlvbiAkRE9NT2JzZXJ2ZXIoaHRtbDogSFRNTEVsZW1lbnQsIGNhbGxiYWNrOiAocmVjb3JkOiBTZW5zZW5USnV0c3VPYnNlcnZlclJlY29yZHMpID0+IHZvaWQpe1xuXG4gICAgY29uc3QgY2hpbGRyZW46IEhUTUxFbGVtZW50W10gPSBPYmplY3QudmFsdWVzKGh0bWwuY2hpbGRyZW4pIGFzIEhUTUxFbGVtZW50W11cblxuXG4gICAgaWYoY2hpbGRyZW4ubGVuZ3RoKXtcblxuICAgICAgICBjaGlsZHJlbi5tYXAoZT0+e1xuXG4gICAgICAgICAgICAkRE9NQXR0cmlidXRlc09ic2VydmVyKGUsIGNhbGxiYWNrKVxuXG4gICAgICAgICAgICAkSlNPYnNlcnZlcihlLCBjYWxsYmFjaylcblxuICAgICAgICAgICAgJERPTU9ic2VydmVyKGUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICBlbHNle1xuXG4gICAgICAgICRET01Db250ZW50T2JzZXJ2ZXIoaHRtbCwgY2FsbGJhY2spXG5cbiAgICB9XG5cbiAgICByZXR1cm4gJERPTU9ic2VydmVyO1xuXG59XG5cblxuXG5cbi8qKlxuICogT2JzZXJ2ZSBKUyBDb2RlIGluIEVsZW1lbnQgXG4gKi9cbiBmdW5jdGlvbiAkSlNPYnNlcnZlcihodG1sOiBIVE1MRWxlbWVudCwgY2FsbGJhY2s6IChyZWNvcmQ6IFNlbnNlblRKdXRzdU9ic2VydmVyUmVjb3JkcykgPT4gdm9pZCl7XG5cblxuICAgIGNvbnN0IG1hdGNoZXMgPSBbLi4uaHRtbC5pbm5lclRleHQubWF0Y2hBbGwoU3ludGF4TmF0aXZlUmVnRXhwKV07XG5cbiAgICBpZihtYXRjaGVzLmxlbmd0aCl7XG5cbiAgICAgICAgbWF0Y2hlcy5tYXAoKG1hdGNoLCBrKT0+eyBtYXRjaGVzW2tdWzFdID0gbWF0Y2hlc1trXVsxXS50cmltKCkgfSlcblxuICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgICBlbGVtZW50OiBodG1sLFxuICAgICAgICAgICAgaXNOYXRpdmU6IHRydWUsXG4gICAgICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgICAgICAgbW9ja3VwOiBodG1sLmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudFxuICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgcmV0dXJuICRET01Db250ZW50T2JzZXJ2ZXI7XG5cbn1cblxuXG5cblxuLyoqXG4gKiBGaW5kIFRyYW5zYWN0aW9uIGV4cHJlc3Npb25zIGluIEpTIEV4cHJlc3Npb25cbiAqL1xuZnVuY3Rpb24gJEpTRmluZFRyYW5zYWN0aW9uczxWPihodG1sOiBIVE1MRWxlbWVudCwgdHJhbnNhY3Rpb25zOiBWLCBjYWxsYmFjazogKHJlY29yZDogU2Vuc2VuVEp1dHN1T2JzZXJ2ZXJSZWNvcmRzKSA9PiB2b2lkKXtcblxuICAgIGlmKHRyYW5zYWN0aW9ucyl7XG5cbiAgICAgICAgY29uc3QgJHRyYW5zYWN0aW9ucyA9IE9iamVjdC5lbnRyaWVzKHRyYW5zYWN0aW9ucyk7XG5cbiAgICAgICAgaWYoJHRyYW5zYWN0aW9ucy5sZW5ndGgpe1xuXG4gICAgICAgICAgICAkdHJhbnNhY3Rpb25zLm1hcChlbnRyeT0+e1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5TdGFiaWxpemVDb250ZW50KGh0bWwuaW5uZXJIVE1MKS5tYXRjaEFsbChuZXcgUmVnRXhwKGAkeyBlbnRyeVswXSB9YCwgJ2cnKSldO1xuXG4gICAgICAgICAgICAgICAgaWYobWF0Y2hlcy5sZW5ndGgpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJEpTRmluZFRyYW5zYWN0aW9ucycsIGVudHJ5LCBtYXRjaGVzKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc05hdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja3VwOiBodG1sLmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuICAgIHJldHVybiAkSlNGaW5kVHJhbnNhY3Rpb25zO1xuXG59XG5cblxuXG5cbi8qKlxuICogRnJhZ21lbnQgcmVuZGVyaW5nIGZyb20gU3RyaW5nXG4gKi9cbmZ1bmN0aW9uIEZyYWdtZW50UmVuZGVyKGlucHV0OiBzdHJpbmcsIGRpY3Rpb25hcnk6IHsgW0s6IHN0cmluZ10gOiBhbnkgIH0gKXtcbiAgICByZXR1cm4gcmVuZGVyKGAkeyBpbnB1dCB9YCwgZGljdGlvbmFyeSwge1xuICAgICAgICBkZWxpbWl0ZXI6IGAkeyBTeURldHIgfWAsXG4gICAgICAgIGNsaWVudDogdHJ1ZVxuICAgIH0pXG59XG5cblxuXG5cblxuXG5cbi8qKlxuICogUGFyc2UgTm9kZSBvZiBDb21wb25lbnRcbiAqL1xuZnVuY3Rpb24gUGFyc2VOb2RlU3RhdGU8Vj4oY29tcG9uZW50OiBTZW5zZW5KdXRzdTxWPiwgbm9kZTogSFRNTEVsZW1lbnQpe1xuXG4gICAgJERPTU9ic2VydmVyKG5vZGUsIChyZWNvcmQpPT57XG5cbiAgICAgICAgaWYocmVjb3JkLm1hdGNoZXMubGVuZ3RoKXtcblxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmVjb3JkLmVsZW1lbnQuJGNvbnRleHQgPSBjb21wb25lbnQuJHN0YXRlO1xuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmKCFyZWNvcmQuaXNOYXRpdmUpe1xuXG4gICAgICAgICAgICAgICAgcmVjb3JkLm1hdGNoZXMubWFwKG1hdGNoPT57XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gbWF0Y2hbMV0gYXMga2V5b2YgVjtcblxuICAgICAgICAgICAgICAgICAgICBpZihrZXkgaW4gY29tcG9uZW50LiR0cmFuc2FjdGlvbnMpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuUHVzaFJlZihrZXksIHJlY29yZClcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LlVwZ3JhZGVUcmFuc2FjdGlvbihrZXkpXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ05vdCBzdXBwb3J0ZWQnLCBrZXksIHJlY29yZCwgd2luZG93LlN0YXRpY1NlbnNlbkp1dHN1SW5zdGFuY2VbIGNvbXBvbmVudC4kc3RhdGljS2V5IF0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgIH0pXG4gICAgXG59XG5cblxuXG5cblxuXG4vKipcbiAqICBQYXJzZSBSZWNvcmRlZFxuICovXG5mdW5jdGlvbiBQYXJzZVJlY29yZDxWPihjb21wb25lbnQ6IFNlbnNlbkp1dHN1PFY+LCByZWNvcmQ6IFNlbnNlblRKdXRzdU9ic2VydmVyUmVjb3JkcywgbWF0Y2g6IFJlZ0V4cE1hdGNoQXJyYXkpe1xuXG4gICAgaWYocmVjb3JkLmNvbnRlbnQpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICByZWNvcmQuZWxlbWVudC5pbm5lckhUTUwgPSBGcmFnbWVudFJlbmRlcigoXG4gICAgICAgICAgICAocmVjb3JkLm1vY2t1cD8uaW5uZXJIVE1MfHwnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKG1hdGNoWzBdKSwgYDwke1N5RGV0cn09JHsgbWF0Y2hbMV0gfSR7U3lEZXRyfT5gIClcbiAgICAgICAgKSwgIGNvbXBvbmVudC4kdHJhbnNhY3Rpb25zIHx8IHt9IGFzIFYpXG5cbiAgICB9XG5cbiAgICBpZihyZWNvcmQuYXR0cmlidXRlKXtcblxuICAgICAgICBpZihyZWNvcmQuYXR0cmlidXRlTmFtZSApe1xuXG4gICAgICAgICAgICByZWNvcmQuZWxlbWVudC5zZXRBdHRyaWJ1dGUocmVjb3JkLmF0dHJpYnV0ZU5hbWUsIEZyYWdtZW50UmVuZGVyKChcbiAgICAgICAgICAgICAgICAocmVjb3JkLm1vY2t1cD8uZ2V0QXR0cmlidXRlKHJlY29yZC5hdHRyaWJ1dGVOYW1lKSB8fCAnJykucmVwbGFjZShuZXcgUmVnRXhwKG1hdGNoWzBdKSwgYDwke1N5RGV0cn09JHsgbWF0Y2hbMV0gfSR7U3lEZXRyfT5gIClcbiAgICAgICAgICAgICksICBjb21wb25lbnQuJHRyYW5zYWN0aW9ucyB8fCB7fSBhcyBWKSApXG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICByZXR1cm4gUGFyc2VSZWNvcmQ7XG4gICAgXG59XG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIFN0YWJpbGl6ZUNvbnRlbnQoY29udGVudDogc3RyaW5nKSA6IHN0cmluZ3tcbiAgICByZXR1cm4gKGNvbnRlbnR8fCcnKS5yZXBsYWNlKC8mZ3Q7L2csIGA+YCkucmVwbGFjZSgvJmx0Oy9nLCBgPGApXG59XG5cblxuXG5cblxuXG5cbmNsYXNzIFNlbnNlbkp1dHN1PFYgZXh0ZW5kcyB7IFtLOiBzdHJpbmddIDogYW55LCAkY29udGV4dD86IFYgfT57XG5cblxuICAgICRzdGF0aWNLZXk6IG51bWJlciA9IDA7XG5cbiAgICAkZWxlbWVudD86IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAkZnJvbVN0cmluZz86IHN0cmluZztcblxuICAgICR2aXJ0dWFsaXphdGlvbjogRG9jdW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgICR0cmFuc2FjdGlvbnM6IFYgPSB7fSBhcyBWO1xuXG4gICAgJHN0YXRlOiBWID0ge30gYXMgVjtcblxuICAgICRyZWZzOiB7IFtSZSBpbiBrZXlvZiBWXSA/OiBBcnJheTxTZW5zZW5USnV0c3VPYnNlcnZlclJlY29yZHM+IH0gPSB7fTtcblxuICAgIC8vICMkcHJvcHMgOiBTZW5zZW5USnV0c3VQcm9wczxWPiA9IHt9IGFzIFNlbnNlblRKdXRzdVByb3BzPFY+XG4gICAgXG5cbiAgICAvKipcbiAgICAgKiBOZXcgQ29uc3RydWN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFNlbnNlblRKdXRzdVByb3BzPFY+KXtcblxuICAgICAgICAvLyB0aGlzLnByb3BzID0gcHJvcHM7XG5cbiAgICAgICAgdGhpcy5Jbml0KHByb3BzKS5TdGF0ZXMoKS5SZW5kZXIoKTtcblxuICAgIH1cblxuICAgIEluaXQocHJvcHM6IFNlbnNlblRKdXRzdVByb3BzPFY+KXtcblxuICAgICAgICAvLyB0aGlzLiMkcHJvcHMgPSBwcm9wcztcblxuICAgICAgICB0aGlzLiRlbGVtZW50ID0gKHByb3BzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgID8gcHJvcHMuZWxlbWVudCBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgOiAoXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3BzLmVsZW1lbnQgPT0gJ3N0cmluZycgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHsgcHJvcHMuZWxlbWVudCB9YCkgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICApXG5cbiAgICAgICAgdGhpcy4kdHJhbnNhY3Rpb25zID0gcHJvcHMudHJhbnNhY3Rpb25zIHx8IHt9IGFzIFY7XG5cbiAgICAgICAgdGhpcy4kc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLiR0cmFuc2FjdGlvbnMpXG5cblxuICAgICAgICB3aW5kb3cuU3RhdGljU2Vuc2VuSnV0c3VJbnN0YW5jZSA9IHdpbmRvdy5TdGF0aWNTZW5zZW5KdXRzdUluc3RhbmNlIHx8IFtdXG4gICAgICAgIFxuICAgICAgICB0aGlzLiRzdGF0aWNLZXkgPSB3aW5kb3cuU3RhdGljU2Vuc2VuSnV0c3VJbnN0YW5jZS5sZW5ndGg7XG5cbiAgICAgICAgd2luZG93LlN0YXRpY1NlbnNlbkp1dHN1SW5zdGFuY2VbIHRoaXMuJHN0YXRpY0tleSBdID0gdGhpc1xuXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9XG5cblxuXG5cblxuICAgIFVwZ3JhZGVUcmFuc2FjdGlvbihrZXkgOiBrZXlvZiBWKXtcblxuXG4gICAgICAgIGlmKGtleSBpbiB0aGlzLiRyZWZzKXtcblxuICAgICAgICAgICAgY29uc3QgcmVjb3JkcyA9IHRoaXMuJHJlZnNbIGtleSBdO1xuXG4gICAgICAgICAgICByZWNvcmRzPy5tYXAocmVjb3JkPT57XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihyZWNvcmQpe1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLm1hdGNoZXMubWFwKG1hdGNoPT57XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZWNvcmQuaXNOYXRpdmUpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyc2VSZWNvcmQ8Vj4odGhpcywgcmVjb3JkLCBtYXRjaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlY29yZC5jb250ZW50KXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wdXRlZCA9IEZyYWdtZW50UmVuZGVyKFN0YWJpbGl6ZUNvbnRlbnQocmVjb3JkLm1vY2t1cD8uaW5uZXJIVE1MfHwnJyksIHRoaXMuJHRyYW5zYWN0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmVsZW1lbnQuaW5uZXJIVE1MID0gY29tcHV0ZWRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRE9NT2JzZXJ2ZXIocmVjb3JkLmVsZW1lbnQsIChyZWMpPT57XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlYy5tYXRjaGVzLmxlbmd0aCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKHJlYy5tYXRjaGVzKS5tYXAobWF0PT57XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5QdXNoUmVmKG1hdFsxXSwgcmVjKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcnNlUmVjb3JkPFY+KHRoaXMsIHJlYywgbWF0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuXG5cbiAgICBTdGF0ZXMoKXtcblxuICAgICAgICBpZih0aGlzLiRzdGF0ZSl7XG5cbiAgICAgICAgICAgIGNvbnN0ICRfc3RhdGVzID0gT2JqZWN0LmVudHJpZXModGhpcy4kc3RhdGUpO1xuXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdGF0ZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYoJF9zdGF0ZXMubGVuZ3RoKXtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUHJlLUJ1aWxkIFN0YXRlc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICRfc3RhdGVzLm1hcChlPT57XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGVbMV0gPT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZVswXSBhcyBrZXlvZiBWO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaW5kZXIgPSBbLi4uZVsxXS5tYXRjaEFsbChTeW50YXhWYXJpYWJsZXNSZWdFeHApXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmaW5kZXIubGVuZ3RoKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRlci5tYXAoZm91bmQ9PntcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFsxXSA9IGZvdW5kWzFdLnRyaW0oKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHRyYW5zYWN0aW9uc1sgbmFtZSBdID0gZVsxXS5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7IGZvdW5kWzBdIH1gKSwgdGhpcy4kc3RhdGVbIGZvdW5kWzFdIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQnVpbGQgU3RhdGVzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgJHN0YXRlcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuJHN0YXRlKTtcbiAgICBcbiAgICAgICAgICAgICAgICAkc3RhdGVzLm1hcChlPT57XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGVbMF0gYXMga2V5b2YgVjtcblxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPYmplY3RzXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgZVsxXSA9PSAnb2JqZWN0Jyl7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBJcyBBcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkoZVsxXSkpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RhdGVbIG5hbWUgXSA9IG5ldyBQcm94eTx0eXBlb2YgZVsxXT4oZVsxXSwge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHRhcmdldFtwcm9wXSA9PSAnZnVuY3Rpb24nKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1NFVCBNT1ZFIFdpdGggRnVuY3Rpb24nLCBwcm9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwbHkodGFyZ2V0LCB0eXBlb2YgcmVjZWl2ZSA9PSAnb2JqZWN0JyA/IHJlY2VpdmUgOiBbcmVjZWl2ZV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gcmVjZWl2ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiR0cmFuc2FjdGlvbnNbIG5hbWUgXSA9IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLlVwZ3JhZGVUcmFuc2FjdGlvbiggbmFtZSApXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdHJhbnNhY3Rpb25zWyBuYW1lIF0gPSB0aGlzLiRzdGF0ZVsgbmFtZSBdXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdGF0ZVsgbmFtZSBdWzBdID0gKCdUZXN0b24nKVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdTdGF0ZSBvZiBPYmplY3QnLCBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy4kc3RhdGUsIGAkeyBuYW1lIH1gLCB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBzZWxmLiR0cmFuc2FjdGlvbnNbIG5hbWUgXTsgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kdHJhbnNhY3Rpb25zWyBuYW1lIF0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5VcGdyYWRlVHJhbnNhY3Rpb24oIG5hbWUgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG4gICAgXG5cblxuICAgIFB1c2hSZWYoa2V5OiBrZXlvZiBWLCByZWNvcmQ6IFNlbnNlblRKdXRzdU9ic2VydmVyUmVjb3Jkcyl7XG5cbiAgICAgICAgdGhpcy4kcmVmc1sga2V5IF0gPSB0aGlzLiRyZWZzWyBrZXkgXSB8fCBbXTtcblxuICAgICAgICB0aGlzLiRyZWZzWyBrZXkgXT8ucHVzaChyZWNvcmQpXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuXG5cbiAgICBcblxuICAgIFxuXG4gICAgUmVuZGVyKCl7XG5cblxuICAgICAgICBpZih0aGlzLiRlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXG4gICAgICAgICAgICB0aGlzLiR2aXJ0dWFsaXphdGlvbiA9IChuZXcgRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyh0aGlzLiRlbGVtZW50LmlubmVySFRNTCwgJ3RleHQvaHRtbCcpXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmFpdGVtZW50IGRlcyBleHByZXNzaW9ucyBOYXRpdmVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgJERPTU9ic2VydmVyKHRoaXMuJHZpcnR1YWxpemF0aW9uLmJvZHksIChyZWNvcmQpPT57XG5cbiAgICAgICAgICAgICAgICBpZihyZWNvcmQubWF0Y2hlcy5sZW5ndGgpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmVsZW1lbnQuJGNvbnRleHQgPSB0aGlzLiRzdGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZihyZWNvcmQuaXNOYXRpdmUpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZWNvcmQubWF0Y2hlcyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQubWF0Y2hlcy5tYXAobWF0Y2g9PntcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQuZWxlbWVudC5pbm5lckhUTUwgPSAoU3RhYmlsaXplQ29udGVudChyZWNvcmQuZWxlbWVudC5pbm5lckhUTUx8fCcnKS5yZXBsYWNlKG1hdGNoWzBdLCBgPCR7U3lEZXRyfSR7IG1hdGNoWzFdIH0ke1N5RGV0cn0+YCkpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJEpTRmluZFRyYW5zYWN0aW9uczxWPihyZWNvcmQuZWxlbWVudCwgdGhpcy4kdHJhbnNhY3Rpb25zLCAocmVjKT0+e1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlYy5pc05hdGl2ZSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlYy5tYXRjaGVzLmxlbmd0aCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWMubWF0Y2hlcy5tYXAobWF0PT57XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5QdXNoUmVmKG1hdFswXSBhcyBrZXlvZiBWLCByZWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5e1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5lbGVtZW50LmlubmVySFRNTCA9IGAkeyBGcmFnbWVudFJlbmRlcihTdGFiaWxpemVDb250ZW50KHJlY29yZC5lbGVtZW50LmlubmVySFRNTHx8JycpLCB0aGlzLiR0cmFuc2FjdGlvbnMpIH1gXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGV0ZWN0ZWQnLCBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyYWl0ZW1lbnQgZGVzIHRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIFBhcnNlTm9kZVN0YXRlPFY+KHRoaXMsIHRoaXMuJHZpcnR1YWxpemF0aW9uLmJvZHkpXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNaXNlIMOgIGpvdXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBPYmplY3QudmFsdWVzKCB0aGlzLiR2aXJ0dWFsaXphdGlvbi5ib2R5LmNoaWxkcmVuICk7XG5cbiAgICAgICAgICAgIGlmKGNoaWxkcmVuLmxlbmd0aCl7XG5cbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5tYXAoY2hpbGQgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQ/LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cblxufVxuXG5cblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgU2Vuc2VuSnV0c3VcblxuIl19